name: CI

# Optimized CI workflow with path-based job filtering
# - Docs-only changes: Runs only Gitleaks + Terraform validation
# - Code changes: Runs full validation, tests, builds, and security scans
# - This saves ~5-7 minutes of CI time for documentation-only PRs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  # Detect what files changed to optimize job execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check what changed
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - '.github/workflows/**'
              - 'Makefile'
            docs:
              - 'docs/**'
              - '**.md'
              - 'examples/**/*.tf'
              - 'examples/**/*.md'

  validate:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check formatting
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not formatted:"
            echo "$unformatted"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --output.sarif.path=golangci-lint.sarif

      - name: Upload golangci-lint SARIF results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: golangci-lint.sarif

      - name: Verify documentation is up-to-date
        run: |
          go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@v0.24.0
          tfplugindocs generate --provider-name cyberarksia
          if [ -n "$(git status --porcelain docs/)" ]; then
            echo "ERROR: Documentation is out of date!"
            echo "Run 'make generate' and commit the changes."
            git diff docs/
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test ./... -v -race -coverprofile=coverage.txt -covermode=atomic

      - name: Upload coverage report
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: coverage.txt

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $coverage%"
          # Note: Threshold is low because acceptance tests require credentials (TF_ACC=1)
          # This provider is primarily integration-tested against real SIA API
          if (( $(echo "$coverage < 5" | bc -l) )); then
            echo "Coverage $coverage% is below threshold of 5%"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build provider
        run: go build -v

      - name: Test installation
        run: make install

  terraform-validate:
    name: Terraform Examples
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true' || needs.changes.outputs.code == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5"

      - name: Terraform Format Check
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -check -recursive examples/

      - name: Validate Terraform Configuration
        run: |
          echo "Validating Terraform configuration in example directories..."
          for dir in examples/*/; do
            if [ -f "$dir/main.tf" ] || [ -f "$dir/provider.tf" ]; then
              echo "Validating: $dir"
              cd "$dir"
              terraform init -backend=false
              terraform validate
              cd - > /dev/null
            fi
          done

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Required for gitleaks to scan commit history

      - name: Scan for secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        if: needs.changes.outputs.code == 'true'
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'

      - name: Cache Go modules
        if: needs.changes.outputs.code == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Scan dependencies for vulnerabilities
        if: needs.changes.outputs.code == 'true'
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@v1.1.4
          govulncheck ./...
