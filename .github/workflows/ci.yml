name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  validate:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.0'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check formatting
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not formatted:"
            echo "$unformatted"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --output.sarif.path=golangci-lint.sarif

      - name: Upload golangci-lint SARIF results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: golangci-lint.sarif

      - name: Verify documentation is up-to-date
        run: |
          go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest
          tfplugindocs generate --provider-name cyberarksia
          if [ -n "$(git status --porcelain docs/)" ]; then
            echo "ERROR: Documentation is out of date!"
            echo "Run 'make generate' and commit the changes."
            git diff docs/
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.0'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test ./... -v -race -coverprofile=coverage.txt -covermode=atomic

      - name: Upload coverage report
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: coverage.txt

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $coverage%"
          # Note: Threshold is low because acceptance tests require credentials (TF_ACC=1)
          # This provider is primarily integration-tested against real SIA API
          if (( $(echo "$coverage < 5" | bc -l) )); then
            echo "Coverage $coverage% is below threshold of 5%"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.0'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build provider
        run: go build -v

      - name: Test installation
        run: make install

  terraform-validate:
    name: Terraform Examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5"

      - name: Terraform Format Check
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -check -recursive examples/

      - name: Validate Terraform Syntax
        run: |
          echo "Validating HCL syntax..."
          for file in $(find examples -name "*.tf"); do
            echo "Checking: $file"
            terraform fmt -check "$file" || exit 1
          done

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.0'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check for accidentally committed secrets
        run: |
          if [ -f .env ]; then
            echo "ERROR: .env file found in repository!"
            exit 1
          fi
          # Search for hardcoded credentials, excluding comments
          if grep -r "CYBERARK_CLIENT_SECRET=" . --include="*.tf" --include="*.go" | grep -E -v '^[[:space:]]*#' | grep -E -v '^[[:space:]]*//'; then
            echo "ERROR: Hardcoded credentials found!"
            exit 1
          fi

      - name: Scan dependencies for vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
