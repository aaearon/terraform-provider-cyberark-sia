openapi: 3.0.3
info:
  title: CyberArk SIA Database Secrets API
  description: API contract for managing database secrets in CyberArk Secure Infrastructure Access
  version: 1.0.0
  contact:
    name: CyberArk SIA Team
    url: https://docs.cyberark.com

servers:
  - url: https://{subdomain}.dpa.{platform_domain}
    description: CyberArk SIA API endpoint
    variables:
      subdomain:
        description: Tenant subdomain (extracted from JWT token)
        default: example-tenant
      platform_domain:
        description: Platform domain (extracted from JWT token)
        default: cyberark.cloud

security:
  - BearerAuth: []

paths:
  /api/secrets/db:
    post:
      summary: Create Database Secret
      description: Creates a new database secret with credentials
      operationId: createDatabaseSecret
      tags:
        - Database Secrets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretCreateRequest'
            example:
              name: customers-db-app-user
              database_id: "1234567890123456"
              username: app_user
              password: s3cr3tP@ssw0rd
              description: Application read-write user
              tags:
                application: web-app
                access_level: read-write
      responses:
        '201':
          description: Secret created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Database workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: DATABASE_NOT_FOUND
                message: "Database workspace with ID '1234567890123456' not found"
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List Database Secrets
      description: Retrieves a list of all database secrets (passwords not included)
      operationId: listDatabaseSecrets
      tags:
        - Database Secrets
      responses:
        '200':
          description: List of database secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/secrets/db/{id}:
    parameters:
      - name: id
        in: path
        description: Secret ID
        required: true
        schema:
          type: string
          example: "9876543210987654"

    get:
      summary: Get Database Secret
      description: Retrieves secret metadata (password NOT included for security)
      operationId: getDatabaseSecret
      tags:
        - Database Secrets
      responses:
        '200':
          description: Secret metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
              example:
                id: "9876543210987654"
                tenant_id: "abc123def456"
                name: customers-db-app-user
                database_id: "1234567890123456"
                username: app_user
                description: Application read-write user
                tags:
                  application: web-app
                  access_level: read-write
                created_time: "2025-10-25T12:00:00Z"
                modified_time: "2025-10-25T15:30:00Z"
                last_rotated_time: "2025-10-25T15:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update/Rotate Database Secret
      description: Updates secret metadata or rotates password
      operationId: updateDatabaseSecret
      tags:
        - Database Secrets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretUpdateRequest'
            examples:
              password_rotation:
                summary: Rotate password
                value:
                  password: newS3cr3tP@ssw0rd
              metadata_update:
                summary: Update metadata
                value:
                  description: "Updated description"
                  tags:
                    application: web-app-v2
                    access_level: read-only
      responses:
        '200':
          description: Secret updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete Database Secret
      description: Deletes a database secret
      operationId: deleteDatabaseSecret
      tags:
        - Database Secrets
      responses:
        '204':
          description: Secret deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - secret is in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: SECRET_IN_USE
                message: "Cannot delete secret: referenced by database workspace"
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth2 access token obtained from /oauth2/platformtoken

  schemas:
    SecretCreateRequest:
      type: object
      required:
        - name
        - database_id
        - username
        - password
      properties:
        name:
          type: string
          description: Secret name/identifier
          example: customers-db-app-user
        database_id:
          type: string
          description: Database workspace ID reference
          example: "1234567890123456"
        username:
          type: string
          description: Database username
          example: app_user
        password:
          type: string
          format: password
          description: Database password (sensitive - never returned in responses)
          example: s3cr3tP@ssw0rd
        description:
          type: string
          description: Human-readable description
          example: Application read-write user for customers database
        tags:
          type: object
          additionalProperties:
            type: string
          description: Key-value metadata
          example:
            application: web-app
            access_level: read-write

    SecretUpdateRequest:
      type: object
      description: All fields optional for partial updates (typically used for password rotation)
      properties:
        name:
          type: string
        database_id:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
          description: New password for rotation
        description:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string

    Secret:
      type: object
      description: Secret metadata (password field is write-only and never returned)
      properties:
        id:
          type: string
          description: Secret ID (server-generated)
          example: "9876543210987654"
        tenant_id:
          type: string
          description: CyberArk tenant ID
        name:
          type: string
          description: Secret name
        database_id:
          type: string
          description: Database workspace reference
        username:
          type: string
          description: Database username
        description:
          type: string
          description: Description
        tags:
          type: object
          additionalProperties:
            type: string
          description: Key-value metadata
        created_time:
          type: string
          format: date-time
          description: ISO 8601 timestamp
        modified_time:
          type: string
          format: date-time
          description: ISO 8601 timestamp
        last_rotated_time:
          type: string
          format: date-time
          description: ISO 8601 timestamp of last password rotation

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: array
          items:
            type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Bad Request - Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: INVALID_INPUT
            message: "Validation failed: password is required"

    Unauthorized:
      description: Unauthorized - Invalid or expired access token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: UNAUTHORIZED
            message: "Access token is invalid or expired"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: FORBIDDEN
            message: "Service account does not have DpaAdmin role"

    NotFound:
      description: Not Found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: NOT_FOUND
            message: "Secret not found"

    Conflict:
      description: Conflict - Resource already exists or constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: ALREADY_EXISTS
            message: "Secret with name 'customers-db-app-user' already exists"

    RateLimited:
      description: Too Many Requests - Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: RATE_LIMIT_EXCEEDED
            message: "Rate limit exceeded. Retry after 60 seconds."

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: INTERNAL_ERROR
            message: "An internal server error occurred"
